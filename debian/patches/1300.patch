From d4c9e9cafd88ea7a24612ca1ba5b13eb682f46f1 Mon Sep 17 00:00:00 2001
From: arokem <arokem@gmail.com>
Date: Thu, 13 Jul 2017 07:14:51 -0700
Subject: [PATCH] RF: Remove patch for older numpy ravel_multi_index.

---
 dipy/tracking/tests/test_utils.py | 30 +-----------------------------
 dipy/tracking/utils.py            | 25 +------------------------
 2 files changed, 2 insertions(+), 53 deletions(-)

diff --git a/dipy/tracking/tests/test_utils.py b/dipy/tracking/tests/test_utils.py
index e301620d7..6f4b1dcc3 100644
--- a/dipy/tracking/tests/test_utils.py
+++ b/dipy/tracking/tests/test_utils.py
@@ -11,7 +11,7 @@
                                  ndbincount, reduce_labels,
                                  reorder_voxels_affine, seeds_from_mask,
                                  random_seeds_from_mask, target,
-                                 target_line_based, _rmi, unique_rows, near_roi,
+                                 target_line_based, unique_rows, near_roi,
                                  reduce_rois, path_length, flexi_tvis_affine,
                                  get_flexi_tvis_affine, _min_at)
 
@@ -451,34 +451,6 @@ def test_streamline_mapping():
     assert_equal(mapping, expected)
 
 
-def test_rmi():
-    I1 = _rmi([3, 4], [10, 10])
-    assert_equal(I1, 34)
-    I1 = _rmi([0, 0], [10, 10])
-    assert_equal(I1, 0)
-    assert_raises(ValueError, _rmi, [10, 0], [10, 10])
-
-    try:
-        from numpy import ravel_multi_index
-    except ImportError:
-        raise nose.SkipTest()
-
-    # Dtype of random integers is system dependent
-    A, B, C, D = np.random.randint(0, 1000, size=[4, 100])
-    I1 = _rmi([A, B], dims=[1000, 1000])
-    I2 = ravel_multi_index([A, B], dims=[1000, 1000])
-    assert_array_equal(I1, I2)
-    I1 = _rmi([A, B, C, D], dims=[1000] * 4)
-    I2 = ravel_multi_index([A, B, C, D], dims=[1000] * 4)
-    assert_array_equal(I1, I2)
-    # Check for overflow with small int types
-    indices = np.random.randint(0, 255, size=(2, 100))
-    dims = (1000, 1000)
-    I1 = _rmi(indices, dims=dims)
-    I2 = ravel_multi_index(indices, dims=dims)
-    assert_array_equal(I1, I2)
-
-
 def test_affine_for_trackvis():
     voxel_size = np.array([1., 2, 3.])
     affine = affine_for_trackvis(voxel_size)
diff --git a/dipy/tracking/utils.py b/dipy/tracking/utils.py
index 1babf5701..b65463e95 100644
--- a/dipy/tracking/utils.py
+++ b/dipy/tracking/utils.py
@@ -53,6 +53,7 @@
 
 from nibabel.affines import apply_affine
 from scipy.spatial.distance import cdist
+from numpy import ravel_multi_index
 
 from dipy.core.geometry import dist_to_corner
 
@@ -71,30 +72,6 @@
 import nibabel as nib
 
 
-def _rmi(index, dims):
-    """An alternate implementation of numpy.ravel_multi_index for older
-    versions of numpy.
-
-    Assumes array layout is C contiguous
-    """
-    # Upcast to integer type capable of holding largest array index
-    index = np.asarray(index, dtype=np.intp)
-    dims = np.asarray(dims)
-    if index.ndim > 2:
-        raise ValueError("Index should be 1 or 2-D")
-    elif index.ndim == 2:
-        index = index.T
-    if (index >= dims).any():
-        raise ValueError("Index exceeds dimensions")
-    strides = np.r_[dims[:0:-1].cumprod()[::-1], 1]
-    return (strides * index).sum(-1)
-
-try:
-    from numpy import ravel_multi_index
-except ImportError:
-    ravel_multi_index = _rmi
-
-
 def density_map(streamlines, vol_dims, voxel_size=None, affine=None):
     """Counts the number of unique streamlines that pass through each voxel.
 
